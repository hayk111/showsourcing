/////// (used everywhere) /////////

// displays

.block {
	display: block;
}

.inline {
	display: inline;
}

.inline-block {
	display: inline-block;
}

.none {
	display: none;
}

.flex {
  display: flex;
}

.flexCenter {
  display: flex;
  justify-content: center;
  align-items: center;
}

.flexVAlign {
	display: flex;
	align-items: center;
}

.flexWrap {
	display: flex;
	flex-wrap: wrap;
}

.flexStart {
	display: flex;
	justify-content: flex-start;
}

.flexEnd {
	display: flex;
	justify-content: flex-end;
}

.flexColumn{
  display: flex;
  flex-direction: column;
}

.flexGrow {
	flex-grow: 1;
}

.flexGrowDouble {
	flex-grow: 2;
}

.flexBetween {
	display: flex;
	justify-content: space-between;
	align-items: center;
}

.flexAround {
	display: flex;
	justify-content: space-around;
	align-items: center;
}

.col {
  display: inline-block;
}

// TODO use scss for this... It's only used in one component also..
.col-5 {
  width: 5%;
}

.col-15 {
  width: 15%;
}

.col-20 {
  width: 20%;
}

.col-25 {
  width: 25%;
}

.col-30 {
	width: 30%;
}

.col-35 {
	width: 35%;
}

.col-40 {
	width: 40%;
}

.col-50 {
  width: 50%;
}

.col-90 {
  width: 90%;
}

.col-100 {
  width: 100%;
}

// width and form
.full-width {
  width: 100%;
}

.full-height {
	height: 100%;
}

.full-height-screen {
	height: 100vh;
}

.no-width {
	width: 0;
}

.no-height {
	height: 0;
}

// pointer
.pointer {
	user-select: none;
  cursor: pointer;
}

.draggable {
	user-select: none;
	cursor: move;
}

.no-select {
	user-select: none;
}

.no-pointer {
	cursor: default !important;
}

// colors
.selected {
	color: var(--color-primary);
}

// hr
.hr {
	height: 1px;
	background: var(--color-divider);
	width: 100%;
}

.hr2 {
	height: 2px;
	background: var(--color-divider);
	width: 100%;
}

.circle {
	border-radius: 50%;
	display: flex;
	justify-content: center;
	align-items: center;
	overflow: hidden;
}

// txt
.ellipsis {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

.ellipsis-no-width {
	width: unset;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

.centered-text {
  text-align: center;
}

.uppercase {
	text-transform: uppercase;
}

.icon-box {
	width: var(--spacing-ms);
}

// misc

.hidden {
	visibility: hidden;
	width: 0;
	height: 0;
}

.scrollable {
	overflow-x: hidden;
	overflow-y: auto;
}

.scrollable-y {
	overflow-y: auto !important;
}


// fixed size of the dot font-size-m
// note: if in the future we use more sizes, implement @each $size in $sizes
.dot-separator > *, .dot-separator-txt-primary > *, .dot-separator-txt-secondary > *, .dot-separator-txt-third > * {
	//for each children that is not the first one we add some spaces and bullet dots on the content
	&:not(:first-child)::before {
		content: "\00a0 \00a0 \2022 \00a0 \00a0"; // 00a0 is a space and 2022 is the bullet
		font-weight: bolder;
		display: inline-block;
		font-size: var(--font-size-m);
	}
}

// if we need the color txt to persist on the dots
// we use this e.g. when we want that a hover effect, or a duedate color does not change the original dot color
.dot-separator-txt-primary > *::before {
	color: var(--color-txt-primary);
}

.dot-separator-txt-secondary > *::before {
	color: var(--color-txt-secondary);
}

.dot-separator-txt-third > *::before {
	color: var(--color-txt-third);
}

.hyphen-separator {
	&::before {
		content: "\00a0 \00a0 \2022 \00a0 \00a0";
		font-weight: bolder;
		display: inline-block;
	}
}

.border-box {
	box-sizing: border-box;
}

.border-separator {
	& > * {
		& {
			position: relative;
			padding: 0 10px;
		}
		//for each children that is not the first one we add some spaces and bullet dots on the content
		&:not(:last-child)::before {
			content: " ";
			position: absolute;
			border-left: 1px var(--color-secondary) solid;
			top: 20%;
			right: 0;
			height: 80%;
			margin-top: auto;
			margin-bottom: auto;
			display: inline-block;
		}
	}
}


.small-gray-badge-separator {
	height: 4px;
	width: 4px;
	background-color: var(--color-txt-secondary);
	border-radius: 50%;
	display: inline-block;
	margin: var(--spacing-xxs) var(--spacing-s);
}


/* different hovers that we can use, when we have conflicts using hovering effects wit children that use this hovering effect class */
$levels: (
	'0',
	'1'
);

@each $level in $levels {
// container that will activate hover effect over item, we use opacity in order to use transition
	.action-hover-container-#{$level} {
	// item that is hidden before hovering
		.action-hover-item-#{$level} {
			opacity: 0;
			transition: 0.3s;
			transition-property: height;
		}
	// item visible when container hovered, we use .disable-action-hover when we want to prevent the hover effect
		&:hover:not(.disable-action-hover-#{$level}) .action-hover-item-#{$level} {
			opacity: 1;
		}
	}
}

.default-transition {
	transition: 0.3s;
}

$padding-horizontal: 8px;
/* Adds hover effect that grows outside of the content on the sides */
.oversized-horizontal-hover:hover {
	border-radius: var(--border-radius);
	background: var(--color-secondary-light);
	cursor: pointer;
	margin-left: -$padding-horizontal;
	padding-left: $padding-horizontal;
	margin-right: -$padding-horizontal;
	padding-right: $padding-horizontal;
}


// https://developer.mozilla.org/en-US/docs/Web/CSS/will-change
.will-change-scroll {
	&:hover {
		will-change: transform;
	}
}

