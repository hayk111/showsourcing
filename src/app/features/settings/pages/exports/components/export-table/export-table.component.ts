import { ChangeDetectionStrategy, Component, EventEmitter, Output, TemplateRef, ViewChild } from '@angular/core';
import { EntityTableComponent, TableConfig } from '~core/list-page';
import { ERM, ExportRequest } from '~core/models';
import { TranslateService } from '@ngx-translate/core';

type ExportStatus = 'ready' | 'pending' | 'processing' | 'failed' | 'done' | 'error';

const tableConfig: TableConfig = {
	icon: { name: 'icon', translationKey: '', width: 0},
	name: { name: 'name', translationKey: 'file-name', width: 190, sortProperty: 'documentUrl' },
	generatedBy: { name: 'generated by', translationKey: 'generated-by', width: 190, sortProperty: 'createdBy.firstName' },
	status: { name: 'status', translationKey: 'status', width: 150, sortProperty: 'status' },
	download: { name: 'download', translationKey: 'download', width: 100, sortable: false },
};

@Component({
	selector: 'export-table-app',
	templateUrl: './export-table.component.html',
	styleUrls: [
		'./export-table.component.scss',
		'../../../../../../theming/specific/list.scss'
	],
	changeDetection: ChangeDetectionStrategy.OnPush
})
export class ExportTableComponent extends EntityTableComponent<ExportRequest> {
	columns = ['icon', 'name', 'generatedBy', 'status', 'download'];
	@Output() download = new EventEmitter<ExportRequest>();
	@Output() showItemsPerPage = new EventEmitter<number>();

	@ViewChild('contextualMenu', { static: false }) contextualMenuTemplate: TemplateRef<any>;

	erm = ERM;
	tableConfig = tableConfig;

	constructor(
		public translate: TranslateService
	) { super(); }

	getFileName(path: string): string {
		if (!path) {
			return '';
		}

		const split = path.split('/');
		return split[split.length - 1];
	}

	getToolTipMsg(status: string) {
		return status !== 'ready' ? this.translate.instant('message.your-export-is-being-processed') : null;
	}

}
